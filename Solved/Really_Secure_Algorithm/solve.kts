import java.math.BigInteger
import java.lang.Long.parseLong 

val p = BigInteger("8337989838551614633430029371803892077156162494012474856684174381868510024755832450406936717727195184311114937042673575494843631977970586746618123352329889")
val q = BigInteger("7755060911995462151580541927524289685569492828780752345560845093073545403776129013139174889414744570087561926915046519199304042166351530778365529171009493")
val e = BigInteger("65537")
val c = BigInteger("7022848098469230958320047471938217952907600532361296142412318653611729265921488278588086423574875352145477376594391159805651080223698576708934993951618464460109422377329972737876060167903857613763294932326619266281725900497427458047861973153012506595691389361443123047595975834017549312356282859235890330349")


fun main() {
    val n = p * q
    val phi = (p - 1.toBigInteger()) * (q - 1.toBigInteger())

    val d = e.modInverse(phi)
    println(d)
    val pt = c.modPow(d, n)

    val pt_hex = pt.toString(16)
    println(pt_hex)

    var flag = ""
    pt_hex.chunked(2).forEach {
        flag += parseLong(it, 16).toChar()
    }
    println(flag)
}

main()